services:

  # prometheus:
  #   image: prom/prometheus:latest
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #   ports:
  #     - '9090:9090'

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: monitoring_grafana
  #   restart: unless-stopped
  #   links:
  #     - prometheus:prometheus
  #   volumes:
  #     - ./data/grafana:/var/lib/grafana
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=12345
  #   ports:
  #     - '6000:3000'

  nginx: 
    image: nginx:stable-alpine
    container_name: nginx
    volumes:
      - ./nginx/templates:/etc/nginx/templates
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./cert/cert.pem:/etc/nginx/cert/cert.pem
      - ./cert/key.pem:/etc/nginx/cert/key.pem
    environment:
      - NGINX_PORT=${NGINX_PORT}
      - BACKEND_PORT=${BACKEND_PORT}
    ports:
      - 443:443
    depends_on:
      - nestjs_api
    networks:
      - postgres-network


  postgres_db:
    image: postgres
    restart: always
    container_name: postgres_db
    environment:
      - POSTGRES_USER=commerce_user
      - POSTGRES_PASSWORD=commerce_pass
      - POSTGRES_DB=ecommerce
    ports:
      - "5432:5432"
    networks:
      - postgres-network

  nestjs_api:
    build:
      dockerfile: Dockerfile
      context: .
      target: development

    volumes:
      - .:/usr/src/app
    env_file:
      - .env
    command: npm run start:dev
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
      # - 443:443
    depends_on:
      - postgres_db #상단 이름 인식
      - redis
    networks:
      - postgres-network
      
  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@admin.com"
      PGADMIN_DEFAULT_PASSWORD: "admin"
    ports:
      - "16543:80"
    depends_on:
      - postgres_db
    networks:
      - postgres-network

  redis:
    image: "redis:alpine"
    env_file: 
      - .env
    ports:
      - 6379:6379
    networks:
      - postgres-network
    volumes:
      - redis:/data

  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - 8081:8081
    depends_on:
      - redis
    networks:
      - postgres-network

volumes:
  postgresql-data:
    driver: cio
    driver_opts:
      profile: "POSTGRESQL"
  redis:
    driver: local

networks:
  postgres-network:
    driver: bridge