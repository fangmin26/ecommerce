var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.522,1,2.287]],["body/controllers/AppController.html",[0,2.393,1,3.597,2,1.887,3,0.287,4,0.214,5,0.25,6,3.583,7,0.684,8,1.951,9,5.246,10,1.887,11,0.025,12,1.041,13,4.231,14,1.539,15,1.504,16,0.569,17,0.793,18,3.299,19,3.583,20,0.287,21,0.078,22,3.155,23,2.188,24,1.645,25,4.231,26,0.019,27,0.019]],["title/modules/AppModule.html",[28,1.241,29,2.287]],["body/modules/AppModule.html",[1,3.138,2,1.769,3,0.184,4,0.137,5,0.16,11,0.025,16,0.664,17,0.509,18,3.2,19,2.301,20,0.184,21,0.05,26,0.014,27,0.014,28,1.442,29,4.443,30,1.212,31,1.901,32,2.301,33,2.301,34,2.301,35,3.486,36,3.486,37,3.2,38,3.486,39,3.2,40,2.22,41,1.522,42,1.522,43,2.718,44,2.419,45,2.419,46,2.718,47,1.822,48,1.303,49,2.718,50,2.718,51,2.301,52,2.718,53,2.301,54,2.718,55,2.301,56,2.718,57,2.718,58,2.718,59,2.718,60,6.422,61,2.718,62,2.718,63,2.718,64,2.718,65,2.718,66,2.718,67,2.718,68,2.718,69,2.718,70,2.718,71,2.718,72,2.718,73,2.718]],["title/injectables/AppService.html",[18,1.911,74,0.595]],["body/injectables/AppService.html",[3,0.303,4,0.225,5,0.264,7,0.723,8,2.019,9,5.35,11,0.025,12,1.099,14,1.625,15,1.557,16,0.474,17,0.837,18,3.109,20,0.303,21,0.082,24,1.737,26,0.02,27,0.02,74,0.967,75,1.625,76,3.782,77,4.467,78,4.467,79,4.467]],["title/controllers/AuthController.html",[0,1.522,80,2.287]],["body/controllers/AuthController.html",[0,0.689,2,0.689,3,0.105,4,0.078,5,0.091,7,0.25,8,0.928,10,2.228,11,0.025,12,1.229,14,1.816,16,0.592,17,0.289,20,0.105,21,0.028,23,0.799,24,2.073,26,0.009,27,0.009,80,1.711,81,1.308,82,1.152,83,1.308,84,2.844,85,3.787,86,2.553,87,2.754,88,3.787,89,2.553,90,2.553,91,2.553,92,2.161,93,2.553,94,1.545,95,2.754,96,1.545,97,2.538,98,2.553,99,1.545,100,2.014,101,1.878,102,1.028,103,1.878,104,2.553,105,1.545,106,2.553,107,1.545,108,2.161,109,1.545,110,1.545,111,2.824,112,1.545,113,4.228,114,1.545,115,1.545,116,3.261,117,1.545,118,3.202,119,1.545,120,1.545,121,1.545,122,4.044,123,1.545,124,1.545,125,1.308,126,2.334,127,1.545,128,2.553,129,2.553,130,1.545,131,1.545,132,1.152,133,1.152,134,1.152,135,1.152,136,1.152,137,1.545,138,2.553,139,1.152,140,1.686,141,1.152,142,1.308,143,1.036,144,1.545,145,1.036,146,1.545,147,1.308,148,1.036,149,1.545,150,1.545,151,1.545,152,0.943,153,1.308,154,1.036,155,1.545,156,2.553,157,1.152,158,0.865,159,1.816,160,1.545,161,1.545,162,1.545,163,0.799,164,0.865,165,1.545,166,1.545,167,1.545,168,1.545,169,3.026,170,3.347,171,1.545,172,1.545,173,1.545,174,0.643,175,1.545,176,1.545,177,1.545,178,1.545,179,1.545,180,1.545,181,1.711,182,2.553,183,1.545,184,1.545,185,1.545,186,1.545,187,1.904,188,1.545,189,1.545,190,1.545,191,1.545,192,1.545,193,1.545,194,1.545,195,1.545,196,1.308,197,3.261,198,1.545,199,1.545,200,1.545,201,1.545,202,2.553,203,2.553,204,1.545,205,1.545,206,1.545]],["title/modules/AuthModule.html",[28,1.241,35,2.082]],["body/modules/AuthModule.html",[2,1.761,3,0.183,4,0.136,5,0.159,11,0.025,16,0.672,17,0.506,20,0.183,21,0.05,26,0.014,27,0.014,28,1.436,30,1.205,31,1.893,35,4.04,37,3.193,39,3.193,40,2.21,41,1.512,42,1.512,44,2.408,45,2.846,47,3.127,48,1.295,51,2.287,53,2.287,80,3.127,84,1.205,140,2.948,141,2.014,207,2.287,208,2.701,209,2.287,210,3.331,211,3.331,212,3.479,213,2.701,214,2.701,215,3.948,216,1.295,217,2.701,218,3.131,219,2.701,220,2.014,221,2.701,222,2.701,223,2.701,224,2.287,225,2.287,226,2.287,227,2.287,228,2.701,229,2.287,230,2.701,231,2.701,232,2.701]],["title/injectables/AuthService.html",[74,0.595,140,1.764]],["body/injectables/AuthService.html",[3,0.076,4,0.057,5,0.066,7,0.182,8,0.708,11,0.025,12,1.2,14,1.717,15,1.683,16,0.517,17,0.21,20,0.076,21,0.021,23,1.59,24,1.483,26,0.007,27,0.007,48,0.538,74,0.339,75,0.408,84,2.588,87,1.877,92,1.648,95,1.573,100,2.105,101,1.964,102,1.016,103,1.964,108,0.95,122,1.648,125,1.648,126,1.799,139,0.837,140,1.006,142,0.95,143,0.752,152,0.685,153,0.95,159,1.119,163,1.006,164,2.293,169,3.522,170,3.27,174,1.803,187,2.595,218,2.498,220,0.837,226,1.648,229,0.95,233,0.95,234,1.947,235,4.443,236,3.076,237,1.947,238,1.947,239,1.947,240,1.947,241,1.947,242,1.947,243,1.947,244,0.95,245,1.829,246,4.095,247,2.293,248,1.122,249,1.947,250,1.122,251,1.122,252,1.947,253,1.122,254,1.947,255,1.122,256,1.947,257,1.122,258,2.182,259,1.947,260,2.578,261,1.122,262,1.947,263,1.122,264,1.947,265,1.122,266,1.122,267,1.122,268,3.076,269,1.122,270,1.947,271,0.95,272,0.95,273,0.95,274,0.837,275,1.188,276,0.95,277,1.122,278,1.305,279,1.122,280,0.95,281,0.95,282,0.95,283,3.48,284,1.122,285,3.48,286,2.182,287,3.229,288,2.745,289,1.122,290,1.122,291,1.122,292,1.122,293,1.122,294,1.947,295,1.09,296,1.122,297,1.122,298,1.122,299,0.95,300,1.947,301,1.122,302,1.122,303,1.122,304,1.122,305,1.122,306,3.229,307,1.947,308,1.122,309,0.95,310,1.648,311,1.947,312,1.122,313,1.122,314,1.122,315,1.947,316,1.122,317,1.947,318,1.122,319,1.947,320,1.122,321,1.122,322,1.122,323,1.122,324,1.122,325,1.122,326,1.122,327,1.122,328,1.122,329,1.122,330,1.122,331,1.122,332,1.122,333,1.122,334,1.122,335,1.947,336,1.122,337,1.947,338,1.947,339,1.947,340,1.947,341,1.947,342,1.122,343,1.122,344,0.95,345,1.122,346,1.122,347,1.122,348,1.122,349,0.752,350,1.122,351,1.122,352,0.752,353,1.122,354,1.122,355,1.122,356,1.122,357,1.122,358,1.122,359,1.122,360,1.122,361,1.122,362,1.122,363,1.122,364,1.122,365,1.122,366,1.122,367,1.122,368,1.122,369,1.122,370,1.122,371,1.122,372,1.122,373,1.122,374,1.122]],["title/classes/ConfirmAuthenticate.html",[21,0.063,87,2.082]],["body/classes/ConfirmAuthenticate.html",[3,0.279,4,0.208,5,0.243,7,0.665,10,2.35,11,0.024,12,1.297,15,1.719,16,0.436,20,0.279,21,0.097,26,0.019,27,0.019,87,3.215,102,1.134,152,3.547,375,1.972,376,3.482,377,1.916,378,5.814,379,5.814,380,4.462,381,4.113,382,4.113,383,4.336,384,4.336,385,2.757]],["title/classes/ConfirmEmailDto.html",[21,0.063,97,2.287]],["body/classes/ConfirmEmailDto.html",[3,0.3,4,0.223,5,0.261,7,0.715,10,1.973,11,0.024,12,1.088,15,1.547,16,0.469,20,0.3,21,0.102,26,0.02,27,0.02,97,3.698,102,0.952,152,3.366,187,4.484,375,2.12,377,2.006,380,3.744,383,4.114,384,4.114,385,2.964,386,3.744,387,4.422]],["title/classes/CreateProductDto.html",[21,0.063,388,1.911]],["body/classes/CreateProductDto.html",[3,0.345,4,0.257,5,0.3,11,0.023,20,0.345,21,0.094,26,0.022,27,0.022,375,2.438,388,3.363,389,4.306,390,3.793]],["title/classes/CreateUserDto.html",[21,0.063,126,1.764]],["body/classes/CreateUserDto.html",[3,0.227,4,0.169,5,0.198,7,0.541,10,2.52,11,0.025,12,1.39,15,1.789,16,0.487,20,0.227,21,0.085,26,0.017,27,0.017,102,1.216,126,2.376,158,1.874,174,2.184,295,2.939,349,3.518,352,3.518,375,1.605,377,1.672,383,4.213,384,4.213,385,2.244,391,5.014,392,2.244,393,3.347,394,3.347,395,3.347,396,3.347,397,3.347,398,4.596,399,3.347,400,3.347,401,4.784,402,4.596,403,3.347,404,3.347,405,3.347,406,3.347,407,3.347,408,3.347,409,3.347,410,2.042]],["title/modules/DatabaseModule.html",[28,1.241,36,2.082]],["body/modules/DatabaseModule.html",[3,0.267,4,0.198,5,0.232,11,0.025,16,0.603,17,0.736,20,0.267,21,0.072,26,0.018,27,0.018,28,1.861,30,1.753,36,3.121,45,3.121,47,3.43,48,1.884,102,0.846,218,3.677,224,3.327,225,3.327,295,2.2,349,2.634,411,3.929,412,3.327,413,2.634,414,3.929,415,3.929,416,3.327,417,3.929,418,3.327,419,3.929,420,3.929,421,3.929,422,3.929,423,3.929,424,2.634,425,3.929,426,3.929,427,3.929,428,2.93]],["title/modules/EmailModule.html",[28,1.241,37,1.911]],["body/modules/EmailModule.html",[3,0.27,4,0.201,5,0.235,11,0.025,16,0.607,17,0.746,20,0.27,21,0.073,26,0.019,27,0.019,28,1.877,30,1.777,31,2.475,37,3.665,40,2.89,41,2.23,42,2.23,44,3.149,45,2.43,47,3.46,48,1.909,247,3.813,429,3.372,430,3.372,431,3.372,432,3.983,433,3.372,434,3.983,435,3.983]],["title/injectables/EmailService.html",[74,0.595,247,1.911]],["body/injectables/EmailService.html",[3,0.222,4,0.165,5,0.193,7,0.529,8,1.646,11,0.025,12,1.276,14,1.19,16,0.593,17,0.613,20,0.222,21,0.06,23,1.692,24,1.272,26,0.016,27,0.016,48,1.569,74,0.789,75,1.19,83,2.771,100,2.019,101,1.883,102,1.116,103,1.883,159,1.19,163,2.34,164,3.134,218,3.706,247,2.534,309,4.392,377,1.646,416,2.771,418,2.771,436,2.771,437,5.187,438,4.525,439,3.273,440,4.525,441,4.525,442,5.187,443,3.273,444,3.273,445,3.273,446,4.525,447,2.771,448,3.273,449,3.273,450,3.273,451,3.273,452,3.273,453,3.273,454,3.273,455,3.273,456,3.273]],["title/injectables/FacebookAuthGuard.html",[74,0.595,154,2.287]],["body/injectables/FacebookAuthGuard.html",[3,0.323,4,0.24,5,0.281,11,0.024,16,0.612,17,0.891,20,0.323,21,0.088,26,0.021,27,0.021,74,1.005,75,1.73,154,3.867,216,2.28,457,4.027,458,3.547,459,2.122,460,4.756]],["title/injectables/FacebookStrategy.html",[74,0.595,210,2.082]],["body/injectables/FacebookStrategy.html",[3,0.207,4,0.154,5,0.18,7,0.493,8,1.565,11,0.025,12,1.059,14,1.108,15,1.604,16,0.529,17,0.571,20,0.207,21,0.056,26,0.015,27,0.015,74,0.75,75,1.108,84,2.226,100,1.359,101,2.076,102,0.656,103,1.267,111,3.21,163,2.804,169,2.042,174,1.267,210,2.626,216,1.461,286,2.579,459,1.359,461,2.579,462,3.722,463,3.046,464,3.046,465,4.304,466,6.104,467,4.991,468,3.046,469,3.046,470,4.304,471,3.046,472,4.304,473,2.579,474,2.272,475,3.046,476,2.042,477,2.272,478,2.272,479,2.885,480,3.046,481,3.046,482,3.046,483,3.046,484,3.046,485,3.046,486,3.046,487,4.304,488,4.304,489,3.046,490,3.046,491,3.046,492,3.046,493,3.046,494,3.046,495,3.046,496,3.046]],["title/injectables/JwtAuthGuard.html",[74,0.595,148,2.287]],["body/injectables/JwtAuthGuard.html",[3,0.323,4,0.24,5,0.281,11,0.024,16,0.612,17,0.891,20,0.323,21,0.088,26,0.021,27,0.021,74,1.005,75,1.73,148,3.867,216,2.28,458,3.547,459,2.122,497,4.027,498,4.756]],["title/injectables/JwtStrategy.html",[74,0.595,211,2.082]],["body/injectables/JwtStrategy.html",[3,0.222,4,0.165,5,0.193,7,0.529,8,1.646,11,0.025,12,1.113,14,1.19,16,0.644,17,0.613,20,0.222,21,0.06,23,2.34,24,1.272,26,0.016,27,0.016,48,1.569,74,0.789,75,1.19,84,2.314,95,1.997,100,2.019,101,1.883,102,0.974,103,1.883,163,2.34,164,2.534,211,2.761,216,1.569,218,3.799,227,2.771,244,2.771,245,2.913,272,2.771,275,3.414,276,2.771,306,2.771,459,1.46,462,3.375,474,2.441,476,2.194,478,2.441,479,2.194,499,2.771,500,3.273,501,4.525,502,3.273,503,3.273,504,2.771,505,2.771,506,3.273,507,3.273,508,3.273,509,3.273]],["title/injectables/LocalAuthGuard.html",[74,0.595,145,2.287]],["body/injectables/LocalAuthGuard.html",[3,0.318,4,0.236,5,0.276,11,0.024,16,0.606,17,0.877,20,0.318,21,0.086,26,0.021,27,0.021,74,0.996,75,1.702,145,3.83,216,2.244,458,3.491,459,2.549,510,3.963,511,4.681,512,3.963,513,4.681]],["title/injectables/LocalStrategy.html",[74,0.595,212,2.082]],["body/injectables/LocalStrategy.html",[3,0.23,4,0.171,5,0.2,7,0.548,8,1.685,11,0.025,12,1.14,14,1.231,15,1.721,16,0.63,17,0.634,20,0.23,21,0.062,24,1.316,26,0.017,27,0.017,74,0.807,75,1.231,84,2.355,100,2.066,101,1.927,102,0.997,103,1.927,111,3.454,140,3.174,141,2.525,159,1.231,163,2.395,164,1.896,174,1.927,212,2.826,216,1.623,295,3.179,459,1.51,462,3.454,474,2.525,476,2.27,478,2.525,479,2.27,504,2.867,514,2.867,515,3.386,516,3.386,517,4.632,518,3.386,519,2.867,520,2.867,521,3.386,522,3.386]],["title/classes/LoginUserDto.html",[21,0.063,181,2.287]],["body/classes/LoginUserDto.html",[3,0.303,4,0.225,5,0.264,7,0.723,11,0.024,12,1.366,15,1.772,20,0.303,21,0.082,26,0.02,27,0.02,102,1.195,174,2.513,181,3.721,295,3.382,375,2.142,377,2.019,392,2.994,523,5.114,524,4.467,525,4.467]],["title/entities/Product.html",[526,2.082,527,2.082]],["body/entities/Product.html",[3,0.241,4,0.179,5,0.21,7,0.574,10,2.582,11,0.024,12,1.424,15,1.746,16,0.376,20,0.241,21,0.065,26,0.017,27,0.017,101,2.251,102,1.246,235,5.021,377,1.74,410,2.918,424,2.379,526,2.918,527,2.918,528,3.005,529,4.034,530,3.3,531,5.41,532,5.387,533,3.55,534,4.05,535,3.55,536,3.55,537,3.55,538,3.005,539,2.379]],["title/controllers/ProductController.html",[0,1.522,540,2.287]],["body/controllers/ProductController.html",[0,1.145,2,1.145,3,0.174,4,0.13,5,0.152,7,0.415,8,1.383,10,2.385,11,0.025,12,1.316,14,1.945,15,1.704,16,0.567,17,0.481,20,0.174,21,0.047,22,1.914,23,1.327,24,2.078,26,0.014,27,0.014,82,1.914,100,2.234,101,2.083,102,1.078,103,2.083,132,3.378,133,2.836,134,1.914,135,1.914,136,1.914,157,1.914,158,1.438,388,3.135,527,1.566,530,3.416,540,2.549,541,2.174,542,2.32,543,4.24,544,3.22,545,3.22,546,3.22,547,2.174,548,2.567,549,2.567,550,2.174,551,3.803,552,2.567,553,2.174,554,3.803,555,2.567,556,2.174,557,3.63,558,3.803,559,2.567,560,2.536,561,2.174,562,1.914,563,2.836,564,2.174,565,2.567,566,2.567,567,2.567,568,2.567,569,2.567,570,2.567,571,2.567,572,2.567,573,2.567,574,2.567,575,2.567]],["title/modules/ProductModule.html",[28,1.241,38,2.082]],["body/modules/ProductModule.html",[2,2.358,3,0.28,4,0.208,5,0.244,11,0.025,16,0.618,17,0.774,20,0.28,21,0.076,26,0.019,27,0.019,28,1.922,30,1.843,31,2.534,38,3.961,40,2.959,41,2.314,42,2.314,44,3.224,540,3.906,560,3.636,561,3.499,576,3.499,577,3.499,578,4.132,579,4.132]],["title/injectables/ProductService.html",[74,0.595,560,1.911]],["body/injectables/ProductService.html",[3,0.19,4,0.141,5,0.165,7,0.452,8,1.472,11,0.025,12,1.362,14,2.165,15,1.552,16,0.504,17,0.524,20,0.19,21,0.051,24,2.152,26,0.015,27,0.015,74,0.705,75,1.017,100,2.326,101,2.17,102,1.123,103,2.17,288,1.874,388,3.099,410,3.789,527,3.377,530,3.52,542,2.469,543,4.416,544,3.427,545,3.427,546,3.427,547,3.427,550,3.427,553,3.427,556,3.427,557,3.631,560,2.266,562,2.084,563,3.018,564,2.367,580,2.367,581,2.795,582,2.795,583,2.795,584,2.795,585,2.795,586,5.535,587,2.795,588,2.795,589,2.795]],["title/interfaces/RequestWithUserInterface.html",[118,2.287,590,1.764]],["body/interfaces/RequestWithUserInterface.html",[3,0.308,4,0.229,5,0.268,7,0.734,11,0.024,16,0.481,20,0.308,26,0.02,27,0.02,102,0.976,113,4.745,118,3.757,159,2.476,377,2.038,459,2.5,520,3.841,590,2.345,591,3.041,592,3.841]],["title/interfaces/TokenPayload.html",[275,2.082,590,1.764]],["body/interfaces/TokenPayload.html",[3,0.323,4,0.24,5,0.281,7,0.769,11,0.024,15,1.741,20,0.323,26,0.021,27,0.021,102,1.024,258,5.467,275,3.52,377,2.098,590,2.459,591,3.188,593,4.027]],["title/classes/UpdateProductDto.html",[21,0.063,557,2.082]],["body/classes/UpdateProductDto.html",[3,0.319,4,0.237,5,0.278,11,0.024,16,0.608,20,0.319,21,0.087,26,0.021,27,0.021,375,2.256,388,2.635,390,3.509,459,2.099,542,2.871,557,3.497,563,3.509,594,3.984,595,3.984,596,3.509,597,3.509,598,4.706]],["title/classes/UpdateUserDto.html",[21,0.063,599,2.545]],["body/classes/UpdateUserDto.html",[3,0.319,4,0.237,5,0.278,11,0.024,16,0.608,20,0.319,21,0.087,26,0.021,27,0.021,126,2.433,143,3.154,375,2.256,392,3.154,459,2.099,542,2.871,595,3.984,596,3.509,597,3.509,599,4.274,600,3.984,601,4.706]],["title/entities/User.html",[159,1.241,526,2.082]],["body/entities/User.html",[3,0.133,4,0.284,5,0.116,7,0.318,10,2.62,11,0.025,12,1.445,15,1.675,16,0.534,20,0.133,21,0.057,26,0.011,27,0.011,84,0.877,102,1.304,103,2.274,158,1.101,159,1.128,170,1.318,174,1.597,235,5.049,273,1.665,274,1.466,295,2.44,349,2.573,352,2.573,377,1.128,401,5.057,410,1.199,424,1.318,428,3.25,526,1.892,530,2.342,532,3.69,534,1.665,538,1.665,539,1.318,602,1.665,603,2.625,604,3.25,605,3.25,606,3.25,607,4.628,608,3.1,609,1.966,610,3.839,611,1.966,612,1.966,613,1.966,614,4.358,615,3.1,616,3.1,617,1.966,618,1.966,619,1.966,620,1.966,621,1.966,622,1.966,623,3.1,624,5.466,625,4.358,626,3.1,627,1.966,628,1.966,629,1.966,630,1.966,631,3.1,632,3.1,633,1.665,634,1.966,635,1.966,636,3.1,637,3.839,638,3.1,639,1.966,640,1.966,641,1.966,642,1.966,643,1.966,644,1.966,645,1.966]],["title/controllers/UserController.html",[0,1.522,646,2.287]],["body/controllers/UserController.html",[0,1.707,2,1.707,3,0.26,4,0.193,5,0.226,7,0.619,8,1.829,10,1.707,11,0.025,12,0.942,14,1.392,16,0.595,17,0.717,20,0.26,21,0.07,22,2.854,23,1.979,24,1.488,26,0.018,27,0.018,82,2.854,84,2.505,95,2.335,132,2.854,133,2.854,134,2.854,135,2.854,136,2.854,157,2.854,158,2.143,159,1.392,245,2.693,646,3.371,647,3.24,648,5.965,649,5.029,650,3.827,651,3.24,652,3.827,653,3.827,654,3.827,655,3.827]],["title/modules/UserModule.html",[28,1.241,39,1.911]],["body/modules/UserModule.html",[2,2.199,3,0.252,4,0.187,5,0.219,11,0.025,16,0.651,17,0.696,20,0.252,21,0.068,26,0.018,27,0.018,28,1.793,30,1.657,31,2.364,39,3.604,40,2.761,41,2.08,42,2.08,44,3.008,45,2.266,159,1.351,245,3.251,412,3.145,413,2.49,433,4.175,646,3.71,651,3.145,656,3.145,657,3.145,658,3.145,659,3.714,660,3.714,661,3.145,662,3.714]],["title/injectables/UserService.html",[74,0.595,245,1.636]],["body/injectables/UserService.html",[3,0.143,4,0.106,5,0.124,7,0.341,8,1.19,11,0.025,12,1.332,14,1.887,15,1.677,16,0.52,17,0.395,20,0.143,21,0.039,24,2.016,26,0.012,27,0.012,74,0.57,75,0.766,84,2.874,95,3.165,100,2.314,101,2.158,102,1.117,103,2.158,126,2.34,139,1.571,143,1.412,159,1.969,163,1.692,164,1.18,169,3.034,170,3.285,174,1.883,245,1.569,271,1.784,287,2.771,288,2.194,352,1.412,410,1.997,413,1.412,428,2.441,530,2.449,539,1.412,542,1.997,562,1.571,603,3.398,604,1.784,605,1.784,606,3.398,661,1.784,663,1.784,664,4.526,665,3.273,666,3.273,667,3.273,668,3.273,669,2.107,670,3.398,671,2.107,672,2.107,673,3.273,674,2.107,675,2.107,676,2.107,677,2.107,678,2.107,679,2.107,680,2.107,681,3.273,682,2.107,683,2.107,684,2.107,685,2.107,686,2.107,687,2.107,688,2.107,689,2.107,690,2.107,691,3.273,692,3.273,693,3.273,694,2.107,695,2.107,696,2.107,697,3.273,698,2.107,699,2.107,700,2.107,701,2.107,702,2.107,703,3.273,704,2.107]],["title/interfaces/VerificationTokenPayloadInterface.html",[278,2.287,590,1.764]],["body/interfaces/VerificationTokenPayloadInterface.html",[3,0.323,4,0.24,5,0.281,7,0.769,11,0.024,15,1.741,20,0.323,26,0.021,27,0.021,102,1.024,174,2.686,278,3.867,377,2.098,590,2.459,591,3.188,705,4.027]],["title/coverage.html",[706,3.473]],["body/coverage.html",[0,2.224,1,1.706,5,0.15,6,2.155,11,0.025,18,1.425,21,0.106,26,0.014,27,0.014,74,1.091,76,2.155,80,1.706,81,2.155,87,1.553,97,1.706,102,0.548,118,1.706,126,1.316,140,1.316,145,1.706,148,1.706,152,2.305,154,1.706,159,0.926,181,1.706,210,1.553,211,1.553,212,1.553,233,2.155,245,1.22,247,1.425,275,1.553,278,1.706,288,1.706,376,2.155,386,2.155,388,1.425,389,2.155,390,2.818,391,2.155,392,3.021,436,2.155,457,2.155,461,2.155,473,2.155,497,2.155,499,2.155,510,2.155,514,2.155,523,2.155,526,2.305,527,1.553,528,2.155,540,1.706,541,2.155,557,1.553,560,1.425,580,2.155,590,2.33,592,2.155,593,2.155,594,2.155,599,1.898,600,2.155,602,2.155,646,1.706,647,2.155,663,2.155,705,2.155,706,1.898,707,2.545,708,2.545,709,2.545,710,6.869,711,5.779,712,2.545,713,2.545,714,6.064,715,5.327,716,2.545,717,2.155,718,2.155,719,3.778,720,2.545,721,2.545,722,2.545,723,2.545]],["title/dependencies.html",[31,1.968,724,2.413]],["body/dependencies.html",[11,0.025,17,0.611,21,0.083,26,0.016,27,0.016,31,1.563,48,1.563,55,2.761,147,2.761,158,1.826,216,1.563,220,2.432,274,2.432,280,2.761,281,2.761,282,2.761,344,2.761,385,2.186,413,2.186,447,2.761,476,3.745,477,3.366,505,3.822,519,3.822,539,2.186,596,2.432,597,2.432,633,2.761,725,3.261,726,3.261,727,3.261,728,3.261,729,5.587,730,3.261,731,3.261,732,3.261,733,3.261,734,3.261,735,3.261,736,3.261,737,3.261,738,3.261,739,3.261,740,3.261,741,3.261,742,5.177,743,3.261,744,3.261,745,3.261,746,3.261,747,3.261,748,3.261,749,3.261,750,3.261,751,3.261,752,3.261,753,3.261,754,3.261,755,3.261,756,3.261,757,3.261,758,3.261,759,3.261,760,3.261,761,3.261,762,3.261,763,3.261]],["title/miscellaneous/enumerations.html",[764,1.91,765,3.475]],["body/miscellaneous/enumerations.html",[4,0.28,7,0.723,11,0.024,26,0.02,27,0.02,159,2.019,174,2.31,477,4.14,479,3.721,512,4.7,607,4.7,764,2.994,765,3.782,766,4.467,767,4.467,768,4.467,769,6.623,770,5.551,771,4.467]],["title/miscellaneous/functions.html",[764,1.91,772,3.475]],["body/miscellaneous/functions.html",[7,0.837,11,0.022,26,0.022,27,0.022,717,4.382,718,5.45,764,3.469,772,4.382,773,5.175]],["title/index.html",[7,0.461,774,2.85,775,2.85]],["body/index.html",[4,0.175,11,0.025,26,0.017,27,0.017,299,2.934,310,3.985,529,2.585,670,2.934,706,2.585,776,3.466,777,3.466,778,4.707,779,3.466,780,3.466,781,3.466,782,3.466,783,3.466,784,3.466,785,5.344,786,3.466,787,3.466,788,3.466,789,6.323,790,3.466,791,3.466,792,3.466,793,6.182,794,3.466,795,3.466,796,4.707,797,3.466,798,3.466,799,3.466,800,3.466,801,4.707,802,3.466,803,3.466,804,3.466,805,4.707,806,4.707,807,3.466,808,3.466,809,3.466,810,3.466,811,3.466,812,2.934,813,3.466,814,3.466,815,3.466,816,3.466,817,3.466,818,3.466,819,3.466,820,3.466,821,3.466,822,2.934,823,3.466,824,3.466,825,3.466,826,3.466,827,3.466,828,3.466,829,2.934]],["title/modules.html",[30,2.077]],["body/modules.html",[11,0.02,26,0.02,27,0.02,29,3.072,30,2.044,35,2.796,36,2.796,37,2.566,38,2.796,39,2.566,812,5.543,830,6.546,831,6.546,832,6.665,833,4.583,834,4.583]],["title/overview.html",[835,3.943]],["body/overview.html",[2,1.336,11,0.024,18,2.769,26,0.015,27,0.015,29,4.453,30,1.336,31,2.039,32,2.536,33,2.536,34,2.536,35,4.079,36,3.017,37,3.401,38,3.468,39,3.401,40,2.381,41,1.677,42,1.677,75,1.089,140,2.556,196,2.536,207,2.536,209,2.536,210,3.017,211,3.017,212,3.017,245,2.912,247,3.401,375,1.436,424,2.007,429,2.536,430,2.536,431,2.536,560,2.769,576,2.536,577,2.536,591,2.007,656,2.536,657,2.536,658,2.536,835,2.536,836,2.995,837,2.995,838,2.995,839,2.995,840,2.995]],["title/properties.html",[377,1.493,724,2.413]],["body/properties.html",[11,0.025,26,0.022,27,0.022,377,1.85,529,3.793,822,4.306,829,4.306,841,5.086,842,5.086,843,5.086]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmAuthenticate.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/RequestWithUserInterface.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":710,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":842,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":760,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":751,"title":{},"body":{"dependencies.html":{}}}],["0.3.11",{"_index":763,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":750,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":753,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":714,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":711,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":715,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":716,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":719,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":712,"title":{},"body":{"coverage.html":{}}}],["01029693106",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["1",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["1.0.0",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["1.0.35",{"_index":745,"title":{},"body":{"dependencies.html":{}}}],["1.1.19",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["1.1.2",{"_index":749,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":645,"title":{},"body":{"entities/User.html":{}}}],["10.0.1",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["11",{"_index":838,"title":{},"body":{"overview.html":{}}}],["12",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["1545942545779682",{"_index":481,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["17.1.1",{"_index":728,"title":{},"body":{"dependencies.html":{}}}],["17.1.9",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"overview.html":{}}}],["2.1.11",{"_index":743,"title":{},"body":{"dependencies.html":{}}}],["2.1.6",{"_index":725,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["2.4.2",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":746,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":840,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":754,"title":{},"body":{"dependencies.html":{}}}],["3.0.8",{"_index":744,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":837,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":755,"title":{},"body":{"dependencies.html":{}}}],["465",{"_index":452,"title":{},"body":{"injectables/EmailService.html":{}}}],["5b3472a02ebfeeb15295d6c403eea92a",{"_index":483,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["6",{"_index":836,"title":{},"body":{"overview.html":{}}}],["6.2.1",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["6.4.7",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["6.9.1",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["63749a42d01c7e0021ea97b7",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["7",{"_index":839,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":762,"title":{},"body":{"dependencies.html":{}}}],["8.9.0",{"_index":757,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["9102262",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["9jrnmdmcde3uyplhzyxfhpaezxbhfp5gogt1unhuxrs",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["__dirname",{"_index":425,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["abc@naver.com",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstoken",{"_index":472,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["action",{"_index":586,"title":{},"body":{"injectables/ProductService.html":{}}}],["adds",{"_index":587,"title":{},"body":{"injectables/ProductService.html":{}}}],["admin",{"_index":770,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["amazing",{"_index":813,"title":{},"body":{"index.html":{}}}],["any,info",{"_index":469,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["any,user",{"_index":468,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["apicreatedresponse",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["apicreatedresponse({description",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiproperty",{"_index":401,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["apiproperty()@column",{"_index":629,"title":{},"body":{"entities/User.html":{}}}],["apiproperty()@column({default",{"_index":615,"title":{},"body":{"entities/User.html":{}}}],["apiproperty()@column({nullable",{"_index":610,"title":{},"body":{"entities/User.html":{}}}],["apiproperty()@column({type",{"_index":623,"title":{},"body":{"entities/User.html":{}}}],["apiproperty()@column({unique",{"_index":608,"title":{},"body":{"entities/User.html":{}}}],["apiproperty()@isstring()@isnotempty",{"_index":398,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isstring()@isnotempty()@minlength(7)@maxlength(20",{"_index":396,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@primarygeneratedcolumn('uuid",{"_index":612,"title":{},"body":{"entities/User.html":{}}}],["apiproperty({default",{"_index":393,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty({default:'sample@email.com",{"_index":407,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apitags",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apitags('auth",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('product",{"_index":565,"title":{},"body":{"controllers/ProductController.html":{}}}],["apitags('user",{"_index":652,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":791,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application_id",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["applications",{"_index":784,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EmailService.html":{}}}],["auth.controller",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":80,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate.dto",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["authenticate.dto.ts",{"_index":376,"title":{},"body":{"classes/ConfirmAuthenticate.html":{},"coverage.html":{}}}],["authenticate.dto.ts:10",{"_index":381,"title":{},"body":{"classes/ConfirmAuthenticate.html":{}}}],["authenticate.dto.ts:6",{"_index":382,"title":{},"body":{"classes/ConfirmAuthenticate.html":{}}}],["authenticate_type",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticateconfirm",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticateconfirm(confirmauthenticatedto",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticatedata",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticatedata.gender",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticatedata.name",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication_id",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":458,"title":{},"body":{"injectables/FacebookAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('facebook",{"_index":460,"title":{},"body":{"injectables/FacebookAuthGuard.html":{}}}],["authguard('google",{"_index":513,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":498,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":511,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":35,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":822,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":140,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":834,"title":{},"body":{"modules.html":{}}}],["await",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["backend",{"_index":747,"title":{},"body":{"dependencies.html":{}}}],["backers",{"_index":814,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('bad",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('email",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["bcrypt.compare(plaintextpassword",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(this.password",{"_index":644,"title":{},"body":{"entities/User.html":{}}}],["bcryptjs",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"dependencies.html":{}}}],["beforeinsert",{"_index":631,"title":{},"body":{"entities/User.html":{}}}],["body",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":614,"title":{},"body":{"entities/User.html":{}}}],["boot",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["bootpay",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bootpay.confirmauthentication",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootpay.getaccesstoken",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootpay.requestauthentication",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootpay.setconfiguration",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootpay/backend",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bootstrap",{"_index":718,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":832,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":830,"title":{},"body":{"modules.html":{}}}],["building",{"_index":779,"title":{},"body":{"index.html":{}}}],["callbackurl",{"_index":484,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["callbackurl:\"http://localhost:3000/facebook/callback\",//http",{"_index":491,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["carrier",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["catch",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["checkauth",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["checkauthenticate",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["class",{"_index":21,"title":{"classes/ConfirmAuthenticate.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmAuthenticate.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":375,"title":{},"body":{"classes/ConfirmAuthenticate.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["clientid",{"_index":480,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["clientid:\"1545942545779682",{"_index":489,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["clientsecret",{"_index":482,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["clientsecret:\"5b3472a02ebfeeb15295d6c403eea92a",{"_index":490,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["cluster_appmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":429,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":430,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":431,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_productmodule",{"_index":576,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_productmodule_providers",{"_index":577,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":656,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":657,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":658,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":532,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{}}}],["column({default:false",{"_index":638,"title":{},"body":{"entities/User.html":{}}}],["column({nullable:true",{"_index":637,"title":{},"body":{"entities/User.html":{}}}],["column({unique:true",{"_index":636,"title":{},"body":{"entities/User.html":{}}}],["compodoc/compodoc",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["configmodule",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{}}}],["configmodule.forroot",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('email_password",{"_index":455,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_service",{"_index":450,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_user",{"_index":453,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('jwt_expiration_time",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_secret",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('postgres_db",{"_index":423,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_host",{"_index":417,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_password",{"_index":421,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_port",{"_index":419,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_user",{"_index":420,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["confirm",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirm(@body",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirm(confirmationdto",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmation",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmationdto",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmauthenticate",{"_index":87,"title":{"classes/ConfirmAuthenticate.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmAuthenticate.html":{},"coverage.html":{}}}],["confirmauthenticate(@body",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmauthenticate(confirmauthenticatedto",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmauthenticatedto",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["confirmauthenticatedto.otp",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmauthenticatedto.receipt_id",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmed",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmemail",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmemail(email",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmemaildto",{"_index":97,"title":{"classes/ConfirmEmailDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["confirnation",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(e",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(error",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(response",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(response,\"response",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(response.authenticate_data.phone",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(response.receipt_id",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(user",{"_index":696,"title":{},"body":{"injectables/UserService.html":{}}}],["const",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":515,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":439,"title":{},"body":{"injectables/EmailService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["constructor(userrepository",{"_index":669,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('product",{"_index":566,"title":{},"body":{"controllers/ProductController.html":{}}}],["controller('user",{"_index":653,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":706,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":542,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":567,"title":{},"body":{"controllers/ProductController.html":{}}}],["create(createproductdto",{"_index":547,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["create(userdata",{"_index":673,"title":{},"body":{"injectables/UserService.html":{}}}],["createproductdto",{"_index":388,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["createtransport",{"_index":446,"title":{},"body":{"injectables/EmailService.html":{}}}],["createuserdto",{"_index":126,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["database",{"_index":422,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":36,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date()).gettime().tostring",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodedconfirmationtoken",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodedconfirmationtoken(token",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConfirmAuthenticate.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":625,"title":{},"body":{"entities/User.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmAuthenticate.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":554,"title":{},"body":{"controllers/ProductController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":529,"title":{},"body":{"entities/Product.html":{},"index.html":{},"properties.html":{}}}],["description:'the",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["development",{"_index":792,"title":{},"body":{"index.html":{}}}],["docs",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["documentation",{"_index":707,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":467,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["dto/create",{"_index":562,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["dto/update",{"_index":564,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["e",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["e2e",{"_index":802,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":780,"title":{},"body":{"index.html":{}}}],["email",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/FacebookStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"miscellaneous/enumerations.html":{}}}],["email.dto",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["email.dto.ts",{"_index":386,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["email.dto.ts:6",{"_index":387,"title":{},"body":{"classes/ConfirmEmailDto.html":{}}}],["email.service",{"_index":434,"title":{},"body":{"modules/EmailModule.html":{}}}],["email/email.module",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["email/email.service",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["email_confirmation_url",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["email_password",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["email_service",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["email_user",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["emailmodule",{"_index":37,"title":{"modules/EmailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules.html":{},"overview.html":{}}}],["emails",{"_index":488,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["emails\",\"name",{"_index":493,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["emailservice",{"_index":247,"title":{"injectables/EmailService.html":{}},"body":{"injectables/AuthService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"coverage.html":{},"overview.html":{}}}],["entities",{"_index":424,"title":{},"body":{"modules/DatabaseModule.html":{},"entities/Product.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/user.entity",{"_index":661,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":526,"title":{"entities/Product.html":{},"entities/User.html":{}},"body":{"entities/Product.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity{.ts,.js",{"_index":426,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["enum",{"_index":624,"title":{},"body":{"entities/User.html":{}}}],["enumerations",{"_index":765,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{}}}],["err",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["error",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{}}}],["error:any,user:any",{"_index":495,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["exclude",{"_index":632,"title":{},"body":{"entities/User.html":{}}}],["exist",{"_index":692,"title":{},"body":{"injectables/UserService.html":{}}}],["expiresin",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmAuthenticate.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/RequestWithUserInterface.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{}}}],["exports",{"_index":433,"title":{},"body":{"modules/EmailModule.html":{},"modules/UserModule.html":{}}}],["exports:[emailservice",{"_index":435,"title":{},"body":{"modules/EmailModule.html":{}}}],["express",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"dependencies.html":{}}}],["extends",{"_index":459,"title":{},"body":{"injectables/FacebookAuthGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/RequestWithUserInterface.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["extractjwt",{"_index":503,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":507,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["facebook",{"_index":477,"title":{},"body":{"injectables/FacebookStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["facebookauthguard",{"_index":154,"title":{"injectables/FacebookAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/FacebookAuthGuard.html":{},"coverage.html":{}}}],["facebooklogin",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["facebookloginredirect",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["facebookloginredirect(@req",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["facebookloginredirect(req",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["facebookstrategy",{"_index":210,"title":{"injectables/FacebookStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/FacebookStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["false",{"_index":616,"title":{},"body":{"entities/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmAuthenticate.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/RequestWithUserInterface.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{}}}],["findall",{"_index":543,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findone",{"_index":544,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["findone(@param('id",{"_index":570,"title":{},"body":{"controllers/ProductController.html":{}}}],["findone(id",{"_index":550,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["framework",{"_index":778,"title":{},"body":{"index.html":{}}}],["function",{"_index":473,"title":{},"body":{"injectables/FacebookStrategy.html":{},"coverage.html":{}}}],["functions",{"_index":772,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gender",{"_index":603,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["gender?:number",{"_index":641,"title":{},"body":{"entities/User.html":{}}}],["generatejwt",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatejwt(userid",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["get(\"/facebook",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\"/facebook/callback",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/facebook')@useguards(facebookauthguard",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/facebook/callback')@useguards(facebookauthguard",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':id",{"_index":551,"title":{},"body":{"controllers/ProductController.html":{}}}],["get('all",{"_index":649,"title":{},"body":{"controllers/UserController.html":{}}}],["get('profile",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["getallusers",{"_index":664,"title":{},"body":{"injectables/UserService.html":{}}}],["getauthicateduser",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["getauthicateduser(email",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["getbyemail",{"_index":665,"title":{},"body":{"injectables/UserService.html":{}}}],["getbyemail(email",{"_index":677,"title":{},"body":{"injectables/UserService.html":{}}}],["getbyemail(email:string",{"_index":689,"title":{},"body":{"injectables/UserService.html":{}}}],["getbyid",{"_index":666,"title":{},"body":{"injectables/UserService.html":{}}}],["getbyid(id",{"_index":679,"title":{},"body":{"injectables/UserService.html":{}}}],["getbyid(id:string",{"_index":694,"title":{},"body":{"injectables/UserService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getprofile",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(@req",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(request",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["getting",{"_index":774,"title":{"index.html":{}},"body":{}}],["getusers",{"_index":648,"title":{},"body":{"controllers/UserController.html":{}}}],["google",{"_index":512,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"miscellaneous/enumerations.html":{}}}],["graph",{"_index":833,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":809,"title":{},"body":{"index.html":{}}}],["guard/facebookauth.guard",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["guard/jwtauth.guard",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["guard/localauth.guard",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["hapi/joi",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["hashedpassword",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":642,"title":{},"body":{"entities/User.html":{}}}],["hello",{"_index":78,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["host",{"_index":416,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/EmailService.html":{}}}],["http://localhost:3000/facebook/callback",{"_index":485,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["httpexception",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["httpexception('no",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('something",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('user",{"_index":691,"title":{},"body":{"injectables/UserService.html":{}}}],["httpexception('wrong",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["https://nestjs.com",{"_index":826,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_request",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.internal_server_error",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.not_found",{"_index":693,"title":{},"body":{"injectables/UserService.html":{}}}],["httpstatus.ok",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["id",{"_index":530,"title":{},"body":{"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":708,"title":{},"body":{"coverage.html":{}}}],["identity_no",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(!ispasswordmatching",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(response.status",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(user.isemailconfirmed",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmAuthenticate.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/RequestWithUserInterface.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmAuthenticate.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"interfaces/RequestWithUserInterface.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmAuthenticate.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/RequestWithUserInterface.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{}}}],["info?:any",{"_index":496,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["inject",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{}}}],["injectable",{"_index":74,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":75,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":685,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(user",{"_index":686,"title":{},"body":{"injectables/UserService.html":{}}}],["installation",{"_index":788,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":790,"title":{},"body":{"index.html":{}}}],["interface",{"_index":590,"title":{"interfaces/RequestWithUserInterface.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayloadInterface.html":{}},"body":{"interfaces/RequestWithUserInterface.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":591,"title":{},"body":{"interfaces/RequestWithUserInterface.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"overview.html":{}}}],["isemail",{"_index":402,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemailconfirmed",{"_index":604,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["isnotempty",{"_index":383,"title":{},"body":{"classes/ConfirmAuthenticate.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{}}}],["isnumber",{"_index":403,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ispasswordmatching",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["isphonenumber",{"_index":404,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isselfcheck",{"_index":605,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["isstring",{"_index":384,"title":{},"body":{"classes/ConfirmAuthenticate.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":380,"title":{},"body":{"classes/ConfirmAuthenticate.html":{},"classes/ConfirmEmailDto.html":{}}}],["joi",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().required",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":816,"title":{},"body":{"index.html":{}}}],["js",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["jwt",{"_index":505,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt_expiration_time",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_secret",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_verification_token_expiration_time",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_verification_token_secret",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtauthguard",{"_index":148,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":506,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":211,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtstrategy,facebookstrategy",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{}}}],["kamil",{"_index":823,"title":{},"body":{"index.html":{}}}],["key",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["lgt",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["license",{"_index":829,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":806,"title":{},"body":{"index.html":{}}}],["local",{"_index":519,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":145,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":212,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["loggeduser",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["login",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@body",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@req",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(request",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuserdto",{"_index":181,"title":{"classes/LoginUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["loginuserdto.password",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["mail",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{}}}],["mail.options",{"_index":442,"title":{},"body":{"injectables/EmailService.html":{}}}],["maintext",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["markemailasconfirmed",{"_index":667,"title":{},"body":{"injectables/UserService.html":{}}}],["markemailasconfirmed(email",{"_index":681,"title":{},"body":{"injectables/UserService.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmAuthenticate.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/RequestWithUserInterface.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["maxlength",{"_index":405,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(20",{"_index":409,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["metadata",{"_index":759,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["minlength",{"_index":406,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(7",{"_index":408,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":764,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":805,"title":{},"body":{"index.html":{}}}],["mode",{"_index":796,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":819,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":824,"title":{},"body":{"index.html":{}}}],["name",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":785,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":828,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":596,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{},"injectables/FacebookAuthGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"controllers/ProductController.html":{},"entities/User.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":413,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newuser",{"_index":697,"title":{},"body":{"injectables/UserService.html":{}}}],["node.js",{"_index":777,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["nodemailer",{"_index":447,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["nodemailer/lib/mailer",{"_index":445,"title":{},"body":{"injectables/EmailService.html":{}}}],["nodemailertransport",{"_index":437,"title":{},"body":{"injectables/EmailService.html":{}}}],["npm",{"_index":789,"title":{},"body":{"index.html":{}}}],["number",{"_index":410,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Product.html":{},"injectables/ProductService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["object",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["open",{"_index":807,"title":{},"body":{"index.html":{}}}],["optional",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["options",{"_index":444,"title":{},"body":{"injectables/EmailService.html":{}}}],["order_name",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["otp",{"_index":378,"title":{},"body":{"classes/ConfirmAuthenticate.html":{}}}],["out",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":835,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":724,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pagination",{"_index":654,"title":{},"body":{"controllers/UserController.html":{}}}],["param",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["parameter",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["parameters",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["partialtype",{"_index":595,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createproductdto",{"_index":598,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["partialtype(createuserdto",{"_index":601,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pass",{"_index":454,"title":{},"body":{"injectables/EmailService.html":{}}}],["passport",{"_index":476,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":474,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":478,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":558,"title":{},"body":{"controllers/ProductController.html":{}}}],["pay",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["payload",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["pg",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["phone",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["plaintextpassword",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["plaintextpassword:string",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["please",{"_index":817,"title":{},"body":{"index.html":{}}}],["port",{"_index":418,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/EmailService.html":{}}}],["post",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["post('check",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('confirm/authenticate",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('email/confirm",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":415,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres_db",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_host",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_password",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_port",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_user",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["price",{"_index":531,"title":{},"body":{"entities/Product.html":{}}}],["primarygeneratedcolumn",{"_index":538,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":534,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{}}}],["private",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["private_key",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["product",{"_index":527,"title":{"entities/Product.html":{}},"body":{"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["product.controller",{"_index":579,"title":{},"body":{"modules/ProductModule.html":{}}}],["product.dto",{"_index":563,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts",{"_index":390,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.service",{"_index":561,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{}}}],["product/product.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["productcontroller",{"_index":540,"title":{"controllers/ProductController.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{}}}],["production",{"_index":798,"title":{},"body":{"index.html":{}}}],["productmodule",{"_index":38,"title":{"modules/ProductModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules.html":{},"overview.html":{}}}],["productservice",{"_index":560,"title":{"injectables/ProductService.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"coverage.html":{},"overview.html":{}}}],["profile",{"_index":466,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["profilefields",{"_index":487,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["progressive",{"_index":776,"title":{},"body":{"index.html":{}}}],["project",{"_index":808,"title":{},"body":{"index.html":{}}}],["promise",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FacebookStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["properties",{"_index":377,"title":{"properties.html":{}},"body":{"classes/ConfirmAuthenticate.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"classes/LoginUserDto.html":{},"entities/Product.html":{},"interfaces/RequestWithUserInterface.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"properties.html":{}}}],["providers",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["read",{"_index":818,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["realname",{"_index":606,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["realname:string,gender:number",{"_index":702,"title":{},"body":{"injectables/UserService.html":{}}}],["receipt_id",{"_index":379,"title":{},"body":{"classes/ConfirmAuthenticate.html":{}}}],["record",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["reflect",{"_index":758,"title":{},"body":{"dependencies.html":{}}}],["refreshtoken",{"_index":465,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["refreshtoken:string",{"_index":494,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["remove",{"_index":545,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["remove(@param('id",{"_index":574,"title":{},"body":{"controllers/ProductController.html":{}}}],["remove(id",{"_index":553,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["removes",{"_index":589,"title":{},"body":{"injectables/ProductService.html":{}}}],["repository",{"_index":670,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["req",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUserInterface.html":{}}}],["request.user",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestwithuser.interface",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestwithuserinterface",{"_index":118,"title":{"interfaces/RequestWithUserInterface.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUserInterface.html":{},"coverage.html":{}}}],["res",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["response.authenticate_data",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["response.send",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmAuthenticate.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/RequestWithUserInterface.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role",{"_index":607,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["role.enum",{"_index":635,"title":{},"body":{"entities/User.html":{}}}],["role.user",{"_index":640,"title":{},"body":{"entities/User.html":{}}}],["run",{"_index":793,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":761,"title":{},"body":{"dependencies.html":{}}}],["sample@email.com'})@isemail",{"_index":394,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["scalable",{"_index":781,"title":{},"body":{"index.html":{}}}],["scope",{"_index":486,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["scope:\"email",{"_index":492,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["seccuess",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["secret",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretorkey",{"_index":508,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["sendemail",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendemail(email",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendmail",{"_index":438,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail(options",{"_index":441,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendverificationlink",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendverificationlink(email",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["server",{"_index":782,"title":{},"body":{"index.html":{}}}],["service",{"_index":449,"title":{},"body":{"injectables/EmailService.html":{}}}],["side",{"_index":783,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(createuserdto",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["sms",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["smtp.gmail.com",{"_index":451,"title":{},"body":{"injectables/EmailService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmAuthenticate.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/RequestWithUserInterface.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["source.email",{"_index":639,"title":{},"body":{"entities/User.html":{}}}],["source.enum",{"_index":634,"title":{},"body":{"entities/User.html":{}}}],["sponsors",{"_index":811,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":773,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../role.enum.ts",{"_index":766,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../source.enum.ts",{"_index":767,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":76,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":77,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:26",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:33",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:46",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:57",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:64",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:69",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:75",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:81",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:104",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:128",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:14",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:22",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:30",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:41",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:48",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:54",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:64",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:80",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:89",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/guard/facebookauth.guard.ts",{"_index":457,"title":{},"body":{"injectables/FacebookAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guard/jwtauth.guard.ts",{"_index":497,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guard/localauth.guard.ts",{"_index":510,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/requestwithuser.interface.ts",{"_index":592,"title":{},"body":{"interfaces/RequestWithUserInterface.html":{},"coverage.html":{}}}],["src/auth/strategy/facebook.strategy.ts",{"_index":461,"title":{},"body":{"injectables/FacebookStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/facebook.strategy.ts:26",{"_index":471,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["src/auth/strategy/facebook.strategy.ts:6",{"_index":463,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["src/auth/strategy/jwt.strategy.ts",{"_index":499,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/jwt.strategy.ts:20",{"_index":502,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategy/jwt.strategy.ts:9",{"_index":500,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategy/local.strategy.ts",{"_index":514,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/local.strategy.ts:16",{"_index":518,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategy/local.strategy.ts:8",{"_index":516,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/tokenpayload.interface.ts",{"_index":593,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["src/auth/verificationtokenpayload.interface.ts",{"_index":705,"title":{},"body":{"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{}}}],["src/database/database.module.ts",{"_index":411,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/email/email.module.ts",{"_index":432,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/email/email.service.ts",{"_index":436,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/email/email.service.ts:24",{"_index":443,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/email.service.ts:8",{"_index":440,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/main.ts",{"_index":717,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/product/dto/create",{"_index":389,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/product/dto/update",{"_index":594,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/product/entities/product.entity.ts",{"_index":528,"title":{},"body":{"entities/Product.html":{},"coverage.html":{}}}],["src/product/entities/product.entity.ts:12",{"_index":537,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:15",{"_index":533,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:6",{"_index":535,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:9",{"_index":536,"title":{},"body":{"entities/Product.html":{}}}],["src/product/product.controller.ts",{"_index":541,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{}}}],["src/product/product.controller.ts:13",{"_index":548,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:18",{"_index":549,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:23",{"_index":552,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:28",{"_index":559,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:33",{"_index":555,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.module.ts",{"_index":578,"title":{},"body":{"modules/ProductModule.html":{}}}],["src/product/product.service.ts",{"_index":580,"title":{},"body":{"injectables/ProductService.html":{},"coverage.html":{}}}],["src/product/product.service.ts:11",{"_index":582,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:15",{"_index":583,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:19",{"_index":585,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:23",{"_index":584,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:7",{"_index":581,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/user/dto/confirm",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmAuthenticate.html":{},"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["src/user/dto/create",{"_index":391,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/login",{"_index":523,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":600,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/entities/role.enum.ts",{"_index":768,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/user/entities/source.enum.ts",{"_index":771,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/user/entities/user.entity",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/user/entities/user.entity.ts",{"_index":602,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:11",{"_index":613,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:15",{"_index":630,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:19",{"_index":609,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:24",{"_index":620,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:28",{"_index":617,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:36",{"_index":628,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:44",{"_index":627,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:48",{"_index":621,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:52",{"_index":618,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:56",{"_index":622,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:60",{"_index":611,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.controller.ts",{"_index":647,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:12",{"_index":650,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":659,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":663,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:14",{"_index":676,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:18",{"_index":678,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:26",{"_index":680,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:33",{"_index":674,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:39",{"_index":682,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:45",{"_index":684,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:8",{"_index":671,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":794,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":797,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":799,"title":{},"body":{"index.html":{}}}],["started",{"_index":775,"title":{"index.html":{}},"body":{}}],["starter",{"_index":787,"title":{},"body":{"index.html":{}}}],["statements",{"_index":709,"title":{},"body":{"coverage.html":{}}}],["statuscode",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["stay",{"_index":820,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":504,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["strategy,profile",{"_index":475,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["strategy/facebook.strategy",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/jwt.strategy",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/local.strategy",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/ConfirmAuthenticate.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"injectables/FacebookStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"injectables/UserService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{}}}],["subject",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject:'email",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["success",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["super",{"_index":479,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["support",{"_index":812,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":831,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":427,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["table",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":722,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["test:covsupport",{"_index":804,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":803,"title":{},"body":{"index.html":{}}}],["tests",{"_index":801,"title":{},"body":{"index.html":{}}}],["text",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["text:maintext",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["thanks",{"_index":810,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.authenticateconfirm(confirmauthenticatedto",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.checkauth",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.confirmemail(email",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.decodedconfirmationtoken(confirmationdto.token",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.generatejwt(user.id",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getauthicateduser(email",{"_index":522,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authservice.getauthicateduser(loginuserdto.email",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.sendverificationlink(createuserdto.email",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(createuserdto",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('email_confirmation_url')}?token=${token",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_verification_token_expiration_time')}s",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_verification_token_secret",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.emailservice.sendmail",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.nodemailertransport",{"_index":448,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.nodemailertransport.sendmail(options",{"_index":456,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.password",{"_index":643,"title":{},"body":{"entities/User.html":{}}}],["this.productservice.create(createproductdto",{"_index":568,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findall",{"_index":569,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findone(+id",{"_index":571,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.remove(+id",{"_index":575,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.update(+id",{"_index":573,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.userrepository.create(userdata",{"_index":698,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":688,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findoneby({email",{"_index":690,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findoneby({id",{"_index":695,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":699,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update({email",{"_index":700,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update({phone",{"_index":704,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.create(createuserdto",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getallusers",{"_index":655,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getbyemail(email",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getbyid(payload.userid",{"_index":509,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.markemailasconfirmed(email",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.updateauthenticationconfirm(authenticatedata.phone",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.verifypassword(plaintextpassword",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["to:email",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["token",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmEmailDto.html":{}}}],["tokenpayload",{"_index":275,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["tokenpayload.interface",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["touch",{"_index":821,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":633,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["true",{"_index":428,"title":{},"body":{"modules/DatabaseModule.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["true})@exclude",{"_index":619,"title":{},"body":{"entities/User.html":{}}}],["try",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["twitter",{"_index":827,"title":{},"body":{"index.html":{}}}],["type",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmAuthenticate.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/EmailService.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"interfaces/RequestWithUserInterface.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"injectables/UserService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{}}}],["type:user",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["typeof",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["typeorm",{"_index":539,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":412,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":662,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":414,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":597,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["types/bcryptjs",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["types/hapi__joi",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["types/nodemailer",{"_index":740,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":786,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":626,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":800,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":843,"title":{},"body":{"properties.html":{}}}],["update",{"_index":546,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["update(@param('id",{"_index":572,"title":{},"body":{"controllers/ProductController.html":{}}}],["update(id",{"_index":556,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["updateauthenticationconfirm",{"_index":668,"title":{},"body":{"injectables/UserService.html":{}}}],["updateauthenticationconfirm(phone",{"_index":683,"title":{},"body":{"injectables/UserService.html":{}}}],["updateauthenticationconfirm(phone:string",{"_index":701,"title":{},"body":{"injectables/UserService.html":{}}}],["updateduser",{"_index":703,"title":{},"body":{"injectables/UserService.html":{}}}],["updateproductdto",{"_index":557,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updates",{"_index":588,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateuserdto",{"_index":599,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["url",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["usefactory",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{}}}],["useguards",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(facebookauthguard",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('login",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":159,"title":{"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/LocalStrategy.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user.controller",{"_index":660,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":392,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:13",{"_index":400,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:2",{"_index":524,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:20",{"_index":397,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:25",{"_index":399,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:3",{"_index":525,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:8",{"_index":395,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.password",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":651,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/dto/confirm",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/dto/create",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["user/entities/user.entity",{"_index":520,"title":{},"body":{"injectables/LocalStrategy.html":{},"interfaces/RequestWithUserInterface.html":{}}}],["user/user.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["usercontroller",{"_index":646,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":675,"title":{},"body":{"injectables/UserService.html":{}}}],["userid",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/TokenPayload.html":{}}}],["usermodule",{"_index":39,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"entities/User.html":{}}}],["usernamefield",{"_index":521,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userrepository",{"_index":672,"title":{},"body":{"injectables/UserService.html":{}}}],["userrepository:repository",{"_index":687,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":245,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["user})@post('signup",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["validate",{"_index":462,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(accesstoken",{"_index":464,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["validate(email",{"_index":517,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":501,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validationschema",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":385,"title":{},"body":{"classes/ConfirmAuthenticate.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":769,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["verificationtokenpayload.interface",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["verificationtokenpayloadinterface",{"_index":278,"title":{"interfaces/VerificationTokenPayloadInterface.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{}}}],["verifypassword",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifypassword(plaintextpassword",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifypassword(plaintextpassword:string",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":841,"title":{},"body":{"properties.html":{}}}],["void",{"_index":470,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["watch",{"_index":795,"title":{},"body":{"index.html":{}}}],["website",{"_index":825,"title":{},"body":{"index.html":{}}}],["welcom",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["went",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["world",{"_index":79,"title":{},"body":{"injectables/AppService.html":{}}}],["wrong",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["you'd",{"_index":815,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EmailModule\n                        \n                        \n                            ProductModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from \"@nestjs/config\";\nimport { DatabaseModule } from './database/database.module';\nimport { ProductModule } from './product/product.module';\nimport { UserModule } from './user/user.module';\nimport { AuthModule } from './auth/auth.module';\nimport { EmailModule } from './email/email.module';\nimport * as Joi from \"@hapi/joi\";//유성 검사\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n    validationSchema: Joi.object(({\n        POSTGRES_HOST: Joi.string().required(),\n        POSTGRES_PORT: Joi.number().required(),\n        POSTGRES_USER: Joi.string().required(),\n        POSTGRES_PASSWORD: Joi.string().required(),\n        POSTGRES_DB: Joi.string().required(),\n\n        JWT_SECRET: Joi.string().required(),\n        JWT_EXPIRATION_TIME: Joi.string().required(),\n        JWT_VERIFICATION_TOKEN_SECRET: Joi.string().required(),\n        JWT_VERIFICATION_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        EMAIL_CONFIRMATION_URL: Joi.string().required(),\n\n        EMAIL_SERVICE: Joi.string().required(),\n        EMAIL_USER: Joi.string().required(),\n        EMAIL_PASSWORD: Joi.string().required()\n      }))\n    }),\n    DatabaseModule,\n    ProductModule,\n    UserModule,\n    AuthModule,\n    EmailModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkAuthenticate\n                            \n                            \n                                    Async\n                                confirm\n                            \n                            \n                                    Async\n                                confirmAuthenticate\n                            \n                            \n                                    Async\n                                facebookLogin\n                            \n                            \n                                    Async\n                                facebookLoginRedirect\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkAuthenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkAuthenticate()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('check')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirm(confirmationDto: ConfirmEmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('email/confirm')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    confirmationDto\n                                    \n                                                ConfirmEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirmAuthenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmAuthenticate(confirmAuthenticateDto: ConfirmAuthenticate)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('confirm/authenticate')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    confirmAuthenticateDto\n                                    \n                                                ConfirmAuthenticate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        facebookLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/facebook')@UseGuards(FacebookAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        facebookLoginRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookLoginRedirect(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/facebook/callback')@UseGuards(FacebookAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(request: RequestWithUserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUserInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(request: RequestWithUserInterface, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUserInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({description: 'the record has been seccuess', type: User})@Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, Req, UseGuards, Res, HttpStatus } from \"@nestjs/common\";\nimport { AuthService } from './auth.service';\nimport { CreateUserDto } from \"../user/dto/create-user.dto\";\nimport { RequestWithUserInterface } from \"./requestWithUser.interface\";\nimport { LocalAuthGuard } from \"./guard/localAuth.guard\";\nimport {Response} from \"express\";\nimport { JwtAuthGuard } from \"./guard/jwtAuth.guard\";\nimport { ConfirmEmailDto } from \"../user/dto/confirm-email.dto\";\nimport { ConfirmAuthenticate } from \"src/user/dto/confirm-authenticate.dto\";\nimport { FacebookAuthGuard } from \"./guard/facebookAuth.guard\";\nimport { ApiCreatedResponse, ApiTags } from \"@nestjs/swagger\";\nimport { User } from \"src/user/entities/user.entity\";\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private readonly authService: AuthService\n  ) {}\n\n  @ApiCreatedResponse({\n    description:'the record has been seccuess',\n    type:User\n  })\n  @Post('signup')\n  async signup(@Body() createUserDto: CreateUserDto){\n    const user = await this.authService.signup(createUserDto)\n    await this.authService.sendVerificationLink(createUserDto.email)\n    return user;\n  }\n\n  @Post('email/confirm')\n  async confirm(@Body() confirmationDto: ConfirmEmailDto){\n    const email = await this.authService.decodedConfirmationToken(confirmationDto.token)\n    await this.authService.confirmEmail(email)\n    return 'success'\n  }\n\n\n  @UseGuards(LocalAuthGuard)\n  @Post('login')\n  // async login(@Body() loginUserDto: LoginUserDto ){\n  //   // const loggedUser = await this.authService.getAuthicatedUser(loginUserDto.email, loginUserDto.password)\n  //   //return loggedUser;\n  // }\n  async login(@Req() request: RequestWithUserInterface, @Res() response: Response){\n    const user = request.user //로그인한 상대는 유저\n    const token = await this.authService.generateJWT(user.id)\n    // return user;\n    return response.send({\n      user, token\n    })\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  async getProfile(@Req() request: RequestWithUserInterface){\n    const {user} = request\n    return user;\n\n  }\n\n  @Post('check') //본인인증 //boot pay docs 본인인증 2-1 (서버사이드 ) /1-1은 클라이언트\n   async checkAuthenticate() {\n    return await this.authService.checkAuth()\n   }\n\n   @Post('confirm/authenticate')\n   async confirmAuthenticate(@Body() confirmAuthenticateDto: ConfirmAuthenticate) {\n    return await this.authService.authenticateConfirm(confirmAuthenticateDto)\n   }\n\n   @Get(\"/facebook\")\n   @UseGuards(FacebookAuthGuard)\n   async facebookLogin(): Promise {\n     return HttpStatus.OK;\n   }\n \n   @Get(\"/facebook/callback\")\n   @UseGuards(FacebookAuthGuard)\n   async facebookLoginRedirect(@Req() req: Request): Promise {\n     return {\n      //  statusCode: HttpStatus.OK,\n\n     };\n   }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nEmailModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nFacebookStrategy\n\nFacebookStrategy\n\nAuthModule -->\n\nFacebookStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            FacebookStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UserModule } from \"../user/user.module\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { LocalStrategy } from \"./strategy/local.strategy\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { JwtModule } from \"@nestjs/jwt\";\nimport { JwtStrategy } from \"./strategy/jwt.strategy\";\nimport { EmailModule } from \"../email/email.module\";\nimport { FacebookStrategy } from './strategy/facebook.strategy';\n\n@Module({\n  imports: [\n    UserModule,\n    PassportModule,\n    ConfigModule,\n    EmailModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) =>({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: `${configService.get('JWT_EXPIRATION_TIME')}` //.env로 바로 하는 경우도 있는데, 매뉴얼적인 스타일\n        }\n      })\n    })\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, LocalStrategy, JwtStrategy,FacebookStrategy]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticateConfirm\n                            \n                            \n                                    Public\n                                    Async\n                                checkAuth\n                            \n                            \n                                    Public\n                                    Async\n                                confirmEmail\n                            \n                            \n                                    Public\n                                    Async\n                                decodedConfirmationToken\n                            \n                            \n                                    Public\n                                generateJWT\n                            \n                            \n                                    Public\n                                    Async\n                                getAuthicatedUser\n                            \n                            \n                                    Public\n                                sendEmail\n                            \n                            \n                                    Public\n                                sendVerificationLink\n                            \n                            \n                                    Public\n                                    Async\n                                signup\n                            \n                            \n                                    Private\n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, configService: ConfigService, emailService: EmailService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticateConfirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticateConfirm(confirmAuthenticateDto: ConfirmAuthenticate)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    confirmAuthenticateDto\n                                    \n                                                ConfirmAuthenticate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        checkAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkAuth()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        confirmEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        decodedConfirmationToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decodedConfirmationToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        generateJWT\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateJWT(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAuthicatedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthicatedUser(email: string, plainTextPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        sendEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        sendVerificationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendVerificationLink(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyPassword(plainTextPassword: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\nimport { UserService } from \"../user/user.service\";\nimport { CreateUserDto } from \"../user/dto/create-user.dto\";\nimport * as bcrypt from 'bcryptjs'\nimport { JwtService } from \"@nestjs/jwt\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { TokenPayload } from \"./tokenPayload.interface\";\nimport { EmailService } from \"../email/email.service\";\nimport { VerificationTokenPayloadInterface } from \"./VerificationTokenPayload.interface\";\nimport Bootpay from \"@bootpay/backend-js\";\nimport { ConfirmAuthenticate } from \"src/user/dto/confirm-authenticate.dto\";\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly userService: UserService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly emailService: EmailService\n  ) {}\n\n  public async signup(createUserDto: CreateUserDto) {\n    try {\n      return await  this.userService.create(createUserDto)\n    }catch (error) {\n      throw new HttpException('something went wrong', HttpStatus.INTERNAL_SERVER_ERROR)\n    }\n  }\n\n  public async getAuthicatedUser(email: string, plainTextPassword:string) {\n    try {\n      const user = await this.userService.getByEmail(email)\n      // password 암호화 풀기 - 디코딩\n      await this.verifyPassword(plainTextPassword, user.password)\n      return user;\n    }catch (error){\n      throw new HttpException('no user here', HttpStatus.BAD_REQUEST)\n    }\n  }\n\n  private async  verifyPassword(plainTextPassword:string, hashedPassword: string) {\n    const isPasswordMatching = await bcrypt.compare(plainTextPassword, hashedPassword)\n    if(!isPasswordMatching) {\n      throw new HttpException('wrong password', HttpStatus.BAD_REQUEST)\n    }\n  }\n\n  public generateJWT(userId: string){ //payload에 userId를 넣는다는 의미\n    const payload: TokenPayload = { userId }\n    const token = this.jwtService.sign(payload)\n    return token\n  }\n\n  public sendEmail(email: string) {\n    const mainText =  'mail test'\n    return this.emailService.sendMail({\n      from: \"abc@naver.com\",\n      to: email,\n      subject: 'email test',\n      text:mainText\n    })\n  }\n\n  public sendVerificationLink(email: string) {\n    const payload: VerificationTokenPayloadInterface = {email}\n    const token = this.jwtService.sign(payload, { //생성\n      secret: this.configService.get('JWT_VERIFICATION_TOKEN_SECRET'),\n      expiresIn: `${this.configService.get('JWT_VERIFICATION_TOKEN_EXPIRATION_TIME')}s`\n    })\n\n    const url = `${this.configService.get('EMAIL_CONFIRMATION_URL')}?token=${token}`\n    const text = `welcom ${url}`\n    return this.emailService.sendMail({\n      to:email,\n      subject:'email confirnation',\n      text\n    })\n  }\n\n  public async confirmEmail(email: string) {\n    const user = await this.userService.getByEmail(email)\n    if(user.isEmailConfirmed){\n      throw new BadRequestException('email is almost confirmed')\n    }\n    await this.userService.markEmailAsConfirmed(email)\n\n  }\n\n  public async decodedConfirmationToken(token: string) {\n    try {\n      const payload = await this.jwtService.verify(token, {\n        secret: this.configService.get('JWT_VERIFICATION_TOKEN_SECRET')\n      })\n      if (typeof payload === 'object' && 'email' in payload) {\n        return payload.email;\n      }\n      throw new BadRequestException()\n    }catch (err){\n      //만료됬을떄도 구현해볼것\n      throw  new BadRequestException('bad confirmation token')\n    }\n  }\n\n  public async checkAuth() {\n    Bootpay.setConfiguration({ //실제적으로 받아야하는 key값 =>써드파티에서 제공이됌 유료임, 주신건 테스트용도로만 사용\n      application_id: '63749a42d01c7e0021ea97b7',\n      private_key:    '9JRNmdmCdE3uyplhZyXFHPaEzXbHFp5goGT1unHUXrs='\n    }) //결제건수에 따라 금액 체계 다름\n    try {\n      await Bootpay.getAccessToken() \n      const response = await Bootpay.requestAuthentication({ //실제적 parameter\n        pg:                '다날',\n        method:            '본인인증',\n        order_name:        '테스트 인증',\n        authentication_id: (new Date()).getTime().toString(),\n        username:          '황민지',\n        identity_no:       '9102262',\n        phone:             '01029693106',\n        carrier:           'LGT',\n        authenticate_type: 'sms'\n      })\n      console.log(response,\"response\")    \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  async authenticateConfirm(confirmAuthenticateDto: ConfirmAuthenticate){\n    Bootpay.setConfiguration({\n      application_id: '63749a42d01c7e0021ea97b7',\n      private_key:    '9JRNmdmCdE3uyplhZyXFHPaEzXbHFp5goGT1unHUXrs='\n    })\n    try {\n      await Bootpay.getAccessToken()\n      const response = await Bootpay.confirmAuthentication(\n          confirmAuthenticateDto.receipt_id,\n          confirmAuthenticateDto.otp\n      )\n      console.log(response)\n      if(response.status ===12){//인증 완ㅛ\n        console.log(response.receipt_id)\n        console.log(response.authenticate_data.phone)\n        const authenticateData = response.authenticate_data\n        this.userService.updateAuthenticationConfirm(authenticateData.phone,\n          authenticateData.name, authenticateData.gender)\n      }\n  } catch (e) {\n      // 발급 실패시 오류\n      console.log(e)\n  }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfirmAuthenticate.html":{"url":"classes/ConfirmAuthenticate.html","title":"class - ConfirmAuthenticate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfirmAuthenticate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/confirm-authenticate.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                otp\n                            \n                            \n                                receipt_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        otp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/confirm-authenticate.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        receipt_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/confirm-authenticate.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class ConfirmAuthenticate {\n  @IsString()\n  @IsNotEmpty()\n  receipt_id: string;\n\n  @IsString()\n  @IsNotEmpty()\n  otp: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfirmEmailDto.html":{"url":"classes/ConfirmEmailDto.html","title":"class - ConfirmEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfirmEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/confirm-email.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/confirm-email.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class ConfirmEmailDto {\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/dto/create-product.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateProductDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({default: 'sample@email.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@MinLength(7)@MaxLength(20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsNotEmpty, IsNumber, IsPhoneNumber, IsString, MaxLength, MinLength } from \"class-validator\";\n\n\nexport class CreateUserDto {\n  @ApiProperty({default:'sample@email.com'})\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  @MaxLength(20)\n  password: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  phone: string; //Number 자바스크립트에서만 씀 \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) =>({\n        type: 'postgres',\n        host: configService.get('POSTGRES_HOST'),\n        port: configService.get('POSTGRES_PORT'),\n        username: configService.get('POSTGRES_USER'),\n        password: configService.get('POSTGRES_PASSWORD'),\n        database: configService.get('POSTGRES_DB'),\n        entities: [\n          __dirname + '/../**/*.entity{.ts,.js}'\n        ],\n        synchronize: true\n      })\n    })\n  ]\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmailService } from './email.service';\nimport { ConfigModule } from \"@nestjs/config\";\n\n@Module({\n  imports: [ConfigModule],\n  providers: [EmailService],\n  exports:[EmailService]\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nodemailerTransport\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/email/email.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMail\n                        \n                    \n                \n            \n            \n                \nsendMail(options: Mail.Options)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            Mail.Options\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodemailerTransport\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mail\n\n                    \n                \n                    \n                        \n                                Defined in src/email/email.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport Mail from \"nodemailer/lib/mailer\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { createTransport } from \"nodemailer\";\n\n@Injectable()\nexport class EmailService {\n  private nodemailerTransport: Mail;\n\n  constructor(\n    private readonly configService: ConfigService\n  ) {\n    this.nodemailerTransport = createTransport({\n      service: configService.get('EMAIL_SERVICE'),\n      // host: 'smtp.gmail.com',\n      // port: 465,\n      auth: {\n        user: configService.get('EMAIL_USER'),\n        pass: configService.get('EMAIL_PASSWORD'),\n      }\n    });\n  }\n\n  sendMail(options: Mail.Options) {\n    return this.nodemailerTransport.sendMail(options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FacebookAuthGuard.html":{"url":"injectables/FacebookAuthGuard.html","title":"injectable - FacebookAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FacebookAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/facebookAuth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class FacebookAuthGuard extends AuthGuard('facebook') {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FacebookStrategy.html":{"url":"injectables/FacebookStrategy.html","title":"injectable - FacebookStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FacebookStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/facebook.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/facebook.strategy.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: Profile, done: (error: any,user: any,info: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/facebook.strategy.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                            Profile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\n\nimport {Strategy,Profile} from \"passport-facebook\"\n@Injectable()\nexport class FacebookStrategy extends PassportStrategy(Strategy){\n    constructor() {\n        super({\n          clientID: \"1545942545779682\",\n          clientSecret: \"5b3472a02ebfeeb15295d6c403eea92a\",\n          callbackURL: \"http://localhost:3000/facebook/callback\",\n          scope: \"email\",\n          profileFields: [\"emails\", \"name\"],\n        });\n      }\n    // constructor() {\n    //     super({\n    //         clientId:\"1545942545779682\", //샘거\n    //         clientSecret:\"5b3472a02ebfeeb15295d6c403eea92a\",\n    //         callbackURL:\"http://localhost:3000/facebook/callback\",//http가 안먹힘\n    //         scope:\"email\",\n    //         profileFields: [\"emails\",\"name\"]\n    //     })\n    // }\n\n    async validate(\n        accessToken: string,\n        refreshToken:string,\n        profile: Profile,\n        done: (error:any,user:any, info?:any) =>void\n    ):Promise {\n        // const {name, emails } = profile;\n\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/jwtAuth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/jwt.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { UserService } from \"../../user/user.service\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { TokenPayload } from \"../tokenPayload.interface\";\n\n@Injectable()\nexport class JwtStrategy extends  PassportStrategy(Strategy){\n  constructor(\n    private readonly userService: UserService,\n    private readonly configService: ConfigService\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: configService.get('JWT_SECRET')\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    return this.userService.getById(payload.userId)\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/localAuth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {} //Google extends AuthGuard('google')\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/local.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { Strategy } from \"passport-local\";\nimport { AuthService } from \"../auth.service\";\nimport { User } from \"../../user/entities/user.entity\";\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy){\n  constructor(\n    private authService: AuthService\n  ) {\n    super({\n      usernameField: 'email'\n    });\n  }\n  async validate(email: string, password: string): Promise {\n    return this.authService.getAuthicatedUser(email, password)\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/login-user.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/login-user.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class LoginUserDto {\n  email: string;\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Product.html":{"url":"entities/Product.html","title":"entity - Product","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/entities/product.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                description\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                price\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity()\nexport class Product {\n  @PrimaryGeneratedColumn('uuid')\n  public id: string;\n\n  @Column()\n  public name: string;\n\n  @Column()\n  public price: number;\n\n  @Column()\n  public description: string;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductController.html":{"url":"controllers/ProductController.html","title":"controller - ProductController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/product.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                product\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createProductDto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/product/product.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/product/product.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/product/product.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/product/product.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/product/product.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { ProductService } from './product.service';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('product')\n@Controller('product')\nexport class ProductController {\n  constructor(private readonly productService: ProductService) {}\n\n  @Post()\n  create(@Body() createProductDto: CreateProductDto) {\n    return this.productService.create(createProductDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.productService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.productService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateProductDto: UpdateProductDto) {\n    return this.productService.update(+id, updateProductDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.productService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductModule.html":{"url":"modules/ProductModule.html","title":"module - ProductModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\n\nProductService\n\nProductService\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/product/product.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductService } from './product.service';\nimport { ProductController } from './product.controller';\n\n@Module({\n  controllers: [ProductController],\n  providers: [ProductService]\n})\nexport class ProductModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductService.html":{"url":"injectables/ProductService.html","title":"injectable - ProductService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/product.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createProductDto: CreateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/product/product.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/product/product.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/product/product.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/product/product.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateProductDto: UpdateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/product/product.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\n\n@Injectable()\nexport class ProductService {\n  create(createProductDto: CreateProductDto) {\n    return 'This action adds a new product';\n  }\n\n  findAll() {\n    return `This action returns all product`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} product`;\n  }\n\n  update(id: number, updateProductDto: UpdateProductDto) {\n    return `This action updates a #${id} product`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} product`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUserInterface.html":{"url":"interfaces/RequestWithUserInterface.html","title":"interface - RequestWithUserInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUserInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/requestWithUser.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { User } from \"../user/entities/user.entity\";\n\nexport interface RequestWithUserInterface extends Request {\n  user: User;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/tokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayload {\n  userId: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/dto/update-product.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateProductDto } from './create-product.dto';\n\nexport class UpdateProductDto extends PartialType(CreateProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                    Optional\n                                gender\n                            \n                            \n                                    Public\n                                    Optional\n                                id\n                            \n                            \n                                    Public\n                                isEmailConfirmed\n                            \n                            \n                                    Public\n                                isSelfCheck\n                            \n                            \n                                    Public\n                                    Optional\n                                password\n                            \n                            \n                                    Public\n                                phone\n                            \n                            \n                                    Public\n                                    Optional\n                                realname\n                            \n                            \n                                    Public\n                                role\n                            \n                            \n                                    Public\n                                source\n                            \n                            \n                                    Public\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isEmailConfirmed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isSelfCheck\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        realname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({type: 'enum', enum: Role, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        source\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Source\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({type: 'enum', enum: Source, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BeforeInsert, Column, Entity, PrimaryGeneratedColumn } from \"typeorm\";\nimport * as bcrypt from 'bcryptjs'\nimport { Exclude } from \"class-transformer\";\nimport { Source } from \"./source.enum\";\nimport { Role } from \"./role.enum\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n@Entity()\nexport class User {\n  @ApiProperty()\n  @PrimaryGeneratedColumn('uuid')\n  public id?: string;\n\n  @ApiProperty()\n  @Column()\n  public username: string;\n\n  @ApiProperty()\n  @Column({unique:true})\n  public email: string;\n\n  @ApiProperty()\n  @Column({nullable:true})\n  @Exclude() //password안나옴\n  public password?: string;\n\n  @ApiProperty()\n  @Column({default:false})\n  public isEmailConfirmed: boolean\n\n  @ApiProperty()\n  @Column({\n    type: 'enum',\n    enum: Source,\n    default: Source.EMAIL\n  })\n  public source :  Source;\n\n  @ApiProperty()\n  @Column({\n    type: 'enum',\n    enum: Role,\n    default: Role.USER\n  })\n  public role :  Role;\n\n  @ApiProperty()\n  @Column({unique:true})\n  public phone: string;\n\n  @ApiProperty()\n  @Column({default:false})\n  public isSelfCheck: boolean;\n\n  @ApiProperty()\n  @Column({nullable:true})\n  public realname?: string;//수집용\n\n  @ApiProperty()\n  @Column({nullable:true})\n  public gender?:number;//수집용\n\n  @BeforeInsert()\n  async hashPassword(){\n    this.password = await bcrypt.hash(this.password, 10);\n  }\n  \n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('all')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { UserService } from './user.service';\n\n@ApiTags('user')\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  //어드민만 접근 가능+ pagination+ 검색  =>>>>>숙제 \n  @Get('all')\n  async getUsers(){\n    return this.userService.getAllUsers()\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { User } from \"./entities/user.entity\";\n\n@Module({\n  imports:[\n    TypeOrmModule.forFeature([User])\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService]\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                markEmailAsConfirmed\n                            \n                            \n                                    Async\n                                updateAuthenticationConfirm\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userData: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        markEmailAsConfirmed\n                        \n                    \n                \n            \n            \n                \n                    \n                    markEmailAsConfirmed(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAuthenticationConfirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAuthenticationConfirm(phone: string, realname: string, gender: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    phone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    realname\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    gender\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { User } from \"./entities/user.entity\";\nimport { Repository } from \"typeorm\";\nimport { CreateUserDto } from \"./dto/create-user.dto\";\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User)\n    private userRepository:Repository\n  ) {}\n\n  async getAllUsers() {\n    return await this.userRepository.find({})\n    \n  }\n  async getByEmail(email:string) { //email로 검색\n    const user = await this.userRepository.findOneBy({email})\n    if (user){\n      return user;\n    }\n    throw new HttpException('User with this email does not exist', HttpStatus.NOT_FOUND);\n  }\n\n  async getById(id:string){ //id로 검색\n    const user = await this.userRepository.findOneBy({id})\n    console.log(user)\n    if (user) return user;\n    throw  new HttpException('User with this id does not exist', HttpStatus.NOT_FOUND)\n  }\n\n  async create(userData: CreateUserDto) {\n    const newUser = await this.userRepository.create(userData);\n    await this.userRepository.save(newUser);\n    return newUser;\n  }\n\n  async markEmailAsConfirmed(email: string){\n    return this.userRepository.update({email},{\n      isEmailConfirmed: true\n    })\n  }\n\n  async updateAuthenticationConfirm(phone:string, realname:string,gender:number){//인증 확인\n     const updatedUser = this.userRepository.update({phone},{\n      isSelfCheck: true,\n      realname,\n      gender\n     })\n\n     return updatedUser;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VerificationTokenPayloadInterface.html":{"url":"interfaces/VerificationTokenPayloadInterface.html","title":"interface - VerificationTokenPayloadInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VerificationTokenPayloadInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/VerificationTokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface VerificationTokenPayloadInterface {\n  email: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/VerificationTokenPayload.interface.ts\n            \n            interface\n            VerificationTokenPayloadInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/auth/guard/facebookAuth.guard.ts\n            \n            injectable\n            FacebookAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/jwtAuth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/localAuth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/requestWithUser.interface.ts\n            \n            interface\n            RequestWithUserInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/strategy/facebook.strategy.ts\n            \n            injectable\n            FacebookStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/tokenPayload.interface.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/product/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/product/dto/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/product/entities/product.entity.ts\n            \n            entity\n            Product\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/product/product.controller.ts\n            \n            controller\n            ProductController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/product/product.service.ts\n            \n            injectable\n            ProductService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dto/confirm-authenticate.dto.ts\n            \n            class\n            ConfirmAuthenticate\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dto/confirm-email.dto.ts\n            \n            class\n            ConfirmEmailDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @bootpay/backend-js : ^2.1.6\n        \n            @compodoc/compodoc : ^1.1.19\n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.1\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.2.1\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @types/bcryptjs : ^2.4.2\n        \n            @types/hapi__joi : ^17.1.9\n        \n            @types/nodemailer : ^6.4.7\n        \n            @types/passport-facebook : ^2.1.11\n        \n            @types/passport-jwt : ^3.0.8\n        \n            @types/passport-local : ^1.0.35\n        \n            bcryptjs : ^2.4.3\n        \n            bootpay-backend-nodejs : ^1.1.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            nodemailer : ^6.9.1\n        \n            passport : ^0.6.0\n        \n            passport-facebook : ^3.0.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.9.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.11\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                        \n                            Source   (src/.../source.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/entities/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 SUPER\n                            \n                        \n                        \n                            \n                                Value : super\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n    src/user/entities/source.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Source\n                    \n                \n                        \n                            \n                                 EMAIL\n                            \n                        \n                        \n                            \n                                Value : email\n                            \n                        \n                        \n                            \n                                 FACEBOOK\n                            \n                        \n                        \n                            \n                                Value : facebook\n                            \n                        \n                        \n                            \n                                 GOOGLE\n                            \n                        \n                        \n                            \n                                Value : google\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAuthModule -->\n\nEmailModule->AuthModule\n\n\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nFacebookStrategy\n\nFacebookStrategy\n\nAuthModule -->\n\nFacebookStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
